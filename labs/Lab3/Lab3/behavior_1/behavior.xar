<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram scale="84.0896">
            <Box name="Stand Up" id="1" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="166" y="227">
              <bitmap>media/images/box/movement/stand.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
              <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
              <Timeline enable="0">
                <BehaviorLayer name="StandUpBehavior">
                  <BehaviorKeyframe name="DetectRobotPose" index="1">
                    <Diagram>
                      <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
              <Resource name="All motors" type="Lock" timeout="0" />
            </Box>
            <Box name="RArmEndEffectorTransform" id="2" localization="8" tooltip="" x="859" y="247">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import math
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.motion_service = self.session().service("ALMotion")

        angles = [-90,90,0,0,7]
#        angles = [0, math.pi / 2, -math.pi/2]
        names = ["RWristYaw", "RElbowYaw", "RElbowRoll", "RShoulderRoll", "RShoulderPitch"]
        for name, angle in zip(names, angles):
            self.motion_service.setAngles(name, angle / 180.0 * math.pi, 0.2)
        time.sleep(2.0)

        name = "RArm"
        frame = motion.FRAME_TORSO
        useSensorValues = False
        result = self.motion_service.getTransform(name, frame, useSensorValues)

        for i in range(0,4):
            print("{0},  {1},  {2},  {3}".format(result[4*i + 0],result[4*i + 1],result[4*i + 2],result[4*i + 3]))
            time.sleep(0.5)
#        print("{0},  {1},  {2},  {3}".format(result[4*1 + 0],result[4*1 + 1],result[4*1 + 3],result[4*1 + 3]))
#        time.sleep(1.0)
#        print("{0},  {1},  {2},  {3}".format(result[4*2 + 0],result[4*2 + 1],result[4*2 + 3],result[4*2 + 3]))
#        time.sleep(1.0)
#        print("{0},  {1},  {2},  {3}".format(result[4*3 + 0],result[4*3 + 1],result[4*3 + 3],result[4*3 + 3]))
        self.onStopped()
    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
              <Parameter name="RShoulderPitch" inherits_from_parent="0" content_type="2" value="30" default_value="0" min="-119.5" max="119.5" tooltip="" id="4" />
              <Parameter name="RShoulderRoll" inherits_from_parent="0" content_type="2" value="-30" default_value="0" min="-76" max="18" tooltip="" id="5" />
              <Parameter name="RElbowRoll" inherits_from_parent="0" content_type="2" value="30" default_value="2" min="2" max="88.5" tooltip="" id="6" />
            </Box>
            <Box name="Initialization" id="3" localization="8" tooltip="" x="566" y="241">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass



    def ik(self, px, py, pz):
        # constants
        L1 = 15
        L2 = 105
        L3 = (55.95+57.75)
        L4 = 12.31

        # swtich to r1 home frame
        x_e = px * 1000
        y_e = py * 1000 + 98
        z_e = pz * 1000 - 100

        print(x_e, y_e, z_e)

        # theta3
        d = math.sqrt(x_e**2 + y_e**2 + z_e**2 - L1**2)
        print(L3**2 + L4**2 + L2**2)
        print(d)
        beta = math.acos((L3**2 + L4**2 + L2**2 - d**2)/(2 * L2 * math.sqrt(L3**2 + L4**2)))
        eta = math.atan(L4 / L3)
        delta = math.pi - beta
        # How do we tell the difference?

        theta3_elbow_down = math.pi - beta + eta
        theta3_elbow_up = math.pi + beta + eta
        theta3_elbow_up = theta3_elbow_up - 2 * math.pi if theta3_elbow_up >= 2 * math.pi - 1e-5 else theta3_elbow_up

        # theta2
        EB = math.sqrt(x_e**2 + z_e**2)
        EC = math.sqrt(L3**2+L4**2) * math.sin(delta)
        d = math.sqrt(EB**2 - EC**2)
        m = math.sqrt(x_e**2 + y_e**2 + z_e**2 - EC**2)
        phi = math.acos(abs(y_e)/m)
        alpha = math.acos(L1 / m)
        theta2 = -(alpha - phi) # direction of theta2 is opposite

        # theta1
        CK = math.sqrt(m**2 - L1**2)
        DK = L1 * math.tan(theta2)  # When theta2 is negative, DK will be negative, too
        DC = CK + DK

        BO = DC*math.cos(theta2)
        AO = math.sqrt(x_e**2 + z_e**2)

        epsilon = math.acos(BO/AO)
        gamma = math.atan(-z_e/x_e)

        theta1_elbow_up = -epsilon + gamma
        theta1_elbow_down = epsilon + gamma # direction of theta1 is opposite

        return [theta1_elbow_down, theta2, theta3_elbow_down]

    def genTraj(self):

        xyz= [[0.21252703321977,
  0.21245339820985315,
  0.2121304864252072,
  0.21161542178254852,
  0.2109465848468987,
  0.21013271354337404,
  0.20917589534490622,
  0.20807755019099095,
  0.2068402328165003,
  0.20546827340646456,
  0.20396799732176202,
  0.20234775295284185,
  0.2006178314587822,
  0.19879031215091741,
  0.19687884792521598,
  0.19489839766427602,
  0.19286491051256083,
  0.19079496784684719,
  0.18870539141739154,
  0.18661282976867194,
  0.18453333900821786,
  0.18248197759970014,
  0.18047243739779734,
  0.17851673393341422,
  0.17662497746250777,
  0.1748052422559388,
  0.17306354516628267,
  0.17140393622003613,
  0.16982869477143236,
  0.16833861574011907,
  0.16693336274432796,
  0.16561185940299628,
  0.16437268719504938,
  0.1632144580776872,
  0.16213613225476017,
  0.16113725550240804,
  0.1602180956953851,
  0.15937966410614574,
  0.15862361329083494,
  0.15795200969527973,
  0.15736698534676796,
  0.15687027894303146,
  0.15646268191593,
  0.1561434087603487,
  0.1559094108647111,
  0.15575464227796554,
  0.15566923585881576,
  0.15563831247398838,
  0.15563911931723667,
  0.1556419137771764,
  0.1556419137771764,
  0.15562848967012455,
  0.1555504098285986,
  0.1553745518299839,
  0.15507426446631012,
  0.15462625852634088,
  0.15401234225083146,
  0.15321965058833165,
  0.15224040495837193,
  0.15107152977884097,
  0.14971421399786988,
  0.1481734467896027,
  0.14645753847139745,
  0.14457763109225003,
  0.14254720070826937,
  0.14038155287280518,
  0.13809731347899062,
  0.1357119183779361,
  0.13324310687010363,
  0.13070842598612725,
  0.12812475420926195,
  0.12550785474242324,
  0.12287196943685219,
  0.12022946500811724,
  0.1175905432078592,
  0.1149630263472631,
  0.11235222921259488,
  0.10976092821915646,
  0.10718943877903686,
  0.10463581228359078,
  0.10209616451875142,
  0.09956514708385963,
  0.09703657138834534,
  0.09450418945336676,
  0.09196262493133468,
  0.08940842924449138,
  0.08684121034623198,
  0.08426474706182707,
  0.08168796670890235,
  0.07912563922417079,
  0.07659864199427988,
  0.07413369045471824,
  0.07176252233729395,
  0.06952068282898462,
  0.06744632950696804,
  0.06558005282453691,
  0.0639684572781426,
  0.062681350405602,
  0.06187378703667655,
  0.061698108158519165,
  0.061698108158519165,
  0.061725059741976285,
  0.0618931536005695,
  0.06225201226417055,
  0.06277189073167394,
  0.06341638518338058,
  0.06416271715069867,
  0.06499729124749165,
  0.06591105209382463,
  0.06689704192367621,
  0.06794920521125315,
  0.0690617950692791,
  0.0702290781107912,
  0.07144519862472587,
  0.0727041351815451,
  0.07399971508599104,
  0.07532566704001559,
  0.07667569950721582,
  0.07804359573619676,
  0.07942331811418585,
  0.0808091154182684,
  0.08219562709666614,
  0.08357797921307411,
  0.08495186727107218,
  0.08631362187862904,
  0.0876602541405545,
  0.08898947876705399,
  0.09029971411593521,
  0.09159005967595568,
  0.09286025276204557,
  0.09411060733204298,
  0.09534193875191396,
  0.09655547894846528,
  0.09775278663889725,
  0.0989356571978424,
  0.10010603624272688,
  0.10126594025865723,
  0.10241738664824536,
  0.10356233459815997,
  0.10470263721535625,
  0.10584000459114268,
  0.10697597685547536,
  0.1081119059053076,
  0.10924894431599155,
  0.1103880399381941,
  0.11152993479844646,
  0.11267516711222259,
  0.11382407544325442,
  0.11497680427005513,
  0.11613331042908179,
  0.11729337008166102,
  0.11845658599399705,
  0.11962239502666203,
  0.12079007580535608,
  0.12195875659339261,
  0.12312742341371363,
  0.12429492847944457,
  0.12545999899163965,
  0.12662124635476874,
  0.127777175847749,
  0.12892619677328931,
  0.13006663309277872,
  0.13119673453917374,
  0.13231468818717074,
  0.1334186304489255,
  0.13450665945496518,
  0.1355768477738008,
  0.136627255420023,
  0.13765594309916157,
  0.13866098563806514,
  0.1396404855516924,
  0.14059258670069327,
  0.14151548799862854,
  0.1424074571328103,
  0.14326684426819464,
  0.1440920957091747,
  0.14488176749921772,
  0.14563453894268374,
  0.1463492260365246,
  0.14702479480148667,
  0.1476603745024172,
  0.14825527074465525,
  0.14880897842736004,
  0.1493211945235658,
  0.14979183063856993,
  0.1502210252692342,
  0.15060915564048002,
  0.1509568489199298,
  0.15126499248486797,
  0.15153474269259068,
  0.15176753119157047,
  0.1519650669986543,
  0.15212933087642314,
  0.15226255483374634,
  0.152367171219666,
  0.15244569855143708,
  0.15250051559314004,
  0.1525336445901702,
  0.15254778112744619,
  0.15254996375035115],
 [-0.13141087938885898,
  -0.13140767458009153,
  -0.13141780904664138,
  -0.1315030808269312,
  -0.13171345330142645,
  -0.13208540693531118,
  -0.13264662267849567,
  -0.1334176178934478,
  -0.13441266306410757,
  -0.13564051533051794,
  -0.13710509157477307,
  -0.1388061126987875,
  -0.14073972561884734,
  -0.14289910091137745,
  -0.14527500031502535,
  -0.14785630618742882,
  -0.15063050361026953,
  -0.15358410498826253,
  -0.15670300685395727,
  -0.15997276943947827,
  -0.1633788116721823,
  -0.16690651775234921,
  -0.17054125634125444,
  -0.1742683193300339,
  -0.1780727935966092,
  -0.18193938528200765,
  -0.18585222101396037,
  -0.18979465333221063,
  -0.19374909774937055,
  -0.19769692625269547,
  -0.20161843693050352,
  -0.2054929125259559,
  -0.20929877307485178,
  -0.21301382041251876,
  -0.21661556611084104,
  -0.2200816298804127,
  -0.22339019279949368,
  -0.22652048867524363,
  -0.2294533168280167,
  -0.23217155973863435,
  -0.23466068806642187,
  -0.23690923157367066,
  -0.23890918370996322,
  -0.24065628105744044,
  -0.24215003090101184,
  -0.24339316321055388,
  -0.24438949024991027,
  -0.245136072513782,
  -0.24559230995211875,
  -0.24569483167499107,
  -0.24569483167499107,
  -0.24562857387769318,
  -0.24533992295970553,
  -0.24492881482247347,
  -0.24448767616071426,
  -0.24406497435808838,
  -0.24369231288351398,
  -0.24339294835481312,
  -0.2431847338187094,
  -0.24308148646791636,
  -0.24309380215107157,
  -0.24322963204715692,
  -0.24349473598414215,
  -0.2438930583867102,
  -0.24442704583229827,
  -0.24509791340141962,
  -0.24590586164589287,
  -0.24685024378358386,
  -0.2479296823209009,
  -0.24914213510225847,
  -0.25048491245775495,
  -0.25195464940521534,
  -0.2535472394803915,
  -0.2552577393924639,
  -0.25708025597176853,
  -0.25900782844767606,
  -0.2610323197009938,
  -0.263144329655477,
  -0.2653331424699304,
  -0.26758671690359465,
  -0.26989172648813636,
  -0.2722336532432764,
  -0.2745969357224983,
  -0.2769651690254548,
  -0.2793213508182695,
  -0.28164816335397264,
  -0.2839282775078763,
  -0.2861446618813076,
  -0.28828087880148234,
  -0.2903213492367138,
  -0.29225156842626143,
  -0.2940582498753149,
  -0.2957293610779309,
  -0.2972539762792965,
  -0.29862177118775823,
  -0.29982168903280976,
  -0.3008382704872591,
  -0.3016397842699001,
  -0.3021391210124273,
  -0.3022474706648929,
  -0.3022474706648929,
  -0.3022309993620585,
  -0.30212832222019725,
  -0.30190938967218595,
  -0.3015927337050528,
  -0.3012007067011053,
  -0.30074698920372767,
  -0.3002393128531067,
  -0.29968231377112486,
  -0.29907904014248504,
  -0.2984317010108809,
  -0.2977420535031894,
  -0.2970116152444945,
  -0.29624178753351316,
  -0.2954339300906325,
  -0.2945894079489608,
  -0.29370962144985424,
  -0.2927960254910589,
  -0.29185014163451606,
  -0.2908735652719556,
  -0.2898679692294894,
  -0.2888351046995122,
  -0.2877768000808517,
  -0.2866949581119067,
  -0.28559155155541005,
  -0.28446861761409165,
  -0.2833282512102497,
  -0.2821725972405789,
  -0.2810038419146954,
  -0.27982420329674695,
  -0.27863592118954356,
  -0.2774412465247521,
  -0.27624243044570895,
  -0.27504171328652166,
  -0.2738413136585726,
  -0.27264341785127333,
  -0.27145016973795033,
  -0.27026366135208024,
  -0.2690859242671671,
  -0.26791892187940397,
  -0.26676454265958616,
  -0.26562459441224073,
  -0.26450079955695593,
  -0.26339479142943917,
  -0.2623081115869877,
  -0.26124220809329785,
  -0.2601984347493683,
  -0.25917805122932386,
  -0.25818222407148755,
  -0.2572120284655751,
  -0.25626845076654114,
  -0.25535239165478973,
  -0.2544646698517335,
  -0.2536060262897252,
  -0.2527771286268408,
  -0.25197857599040274,
  -0.25121090382891254,
  -0.25047458875047884,
  -0.2497700532269435,
  -0.2490976700466948,
  -0.24845776640538086,
  -0.24785062753212533,
  -0.2472764997589767,
  -0.24673559295279196,
  -0.24622808224106268,
  -0.24575410897590355,
  -0.24531378089307054,
  -0.24490717143507196,
  -0.24453431821878205,
  -0.24419522063819105,
  -0.24388983660170777,
  -0.24361807841057553,
  -0.24337980779023516,
  -0.24317483008968035,
  -0.24300288766474554,
  -0.24286365245955524,
  -0.2427567177956117,
  -0.24268158936954037,
  -0.24263767544738857,
  -0.24262427622403254,
  -0.2426405722883221,
  -0.2426856120943142,
  -0.2427582982802639,
  -0.2428573725900648,
  -0.24298139901991406,
  -0.24312874460737396,
  -0.243297556949337,
  -0.2434857369845719,
  -0.24369090462203474,
  -0.24391035306856296,
  -0.24414098442922555,
  -0.24437921259510284,
  -0.24462080560448163,
  -0.24486060906979634,
  -0.24509202307145903,
  -0.245305961000212,
  -0.24548888902161595,
  -0.2456209561005397,
  -0.24568453320347639,
  -0.24569483167499115],
 [0.12221200144488684,
  0.1222051824994547,
  0.1221760819940507,
  0.12213197573321433,
  0.12207809418995283,
  0.12201660923335503,
  0.12194891727544663,
  0.12187626278407959,
  0.12179994478442924,
  0.12172139739218127,
  0.12164221584724898,
  0.12156415142604385,
  0.1214890858645354,
  0.12141899214177564,
  0.12135588733060212,
  0.1213017828445272,
  0.12125863711668686,
  0.12122831523451345,
  0.12121255916482206,
  0.1212129708628662,
  0.12123100876624408,
  0.12126799601987628,
  0.12132513645560633,
  0.12140353216150396,
  0.12150419481323854,
  0.12162804223418092,
  0.12177587229164956,
  0.12194830846823322,
  0.12214571526428743,
  0.12236808666126715,
  0.12261491653861979,
  0.12288506525612676,
  0.1231766405467366,
  0.1234869124806012,
  0.1238122809655848,
  0.12414830995570814,
  0.12448983571869926,
  0.12483114811241709,
  0.1251662350551005,
  0.12548907247871088,
  0.12579393602636035,
  0.1260757071535234,
  0.12633014504318402,
  0.12655409575739235,
  0.12674560794294668,
  0.1269039093001348,
  0.12702912618752815,
  0.12712127763487385,
  0.1271765311022164,
  0.1271888045194304,
  0.1271888045194304,
  0.12718046555514018,
  0.12714272754366782,
  0.1270842934087757,
  0.12701340398919037,
  0.126933544361745,
  0.12684657855211856,
  0.12675370808027786,
  0.12665577625236515,
  0.12655338672948327,
  0.12644695715323748,
  0.1263367464579342,
  0.1262228717067753,
  0.12610532309158012,
  0.12598398344490203,
  0.12585865809394653,
  0.12572912103071962,
  0.12559518369110548,
  0.12545679282225175,
  0.12531416369615556,
  0.1251679539725013,
  0.12501948140074612,
  0.12487098471748428,
  0.12472592082583393,
  0.12458928182101309,
  0.12446790191410513,
  0.12437070658649695,
  0.12430883549639186,
  0.12429555042519842,
  0.12434582742911296,
  0.12447554016081813,
  0.12470018286795272,
  0.12503316598138864,
  0.12548383840387062,
  0.1260555189092064,
  0.1267439049756757,
  0.12753622341473517,
  0.12841137770191477,
  0.12934116271646676,
  0.13029241957084042,
  0.13122984759544168,
  0.13211910395554832,
  0.13292980123327797,
  0.13363804356337047,
  0.13422820377253486,
  0.13469370647958082,
  0.1350365442095784,
  0.13526467252032007,
  0.13538437621285881,
  0.13540782251954925,
  0.13540782251954925,
  0.13540363690360208,
  0.13537659394179039,
  0.1353135506603861,
  0.1352098105073687,
  0.13506171322782942,
  0.13486459604358825,
  0.13461328694996183,
  0.13430263044482552,
  0.13392779885587106,
  0.13348448350703762,
  0.1329690283285746,
  0.13237853349169948,
  0.13171093972763304,
  0.13096509646515744,
  0.13014081354843307,
  0.1292388948169697,
  0.12826115130623855,
  0.12721039186309402,
  0.1260903893847264,
  0.12490582158946989,
  0.1236621861498114,
  0.1223656911078381,
  0.12102312269409818,
  0.11964169391830179,
  0.11822887852071909,
  0.11679223598188077,
  0.11533923418997183,
  0.11387707695779192,
  0.1124125437634452,
  0.11095184877626614,
  0.10950052537346935,
  0.10806334096259995,
  0.10664424508245708,
  0.10524635161919121,
  0.1038719537635565,
  0.10252256829553791,
  0.10119900414147309,
  0.09990144907280232,
  0.09862956797999503,
  0.09738260633639811,
  0.09615949315703143,
  0.0949589387958851,
  0.09377952413486468,
  0.09261977893701152,
  0.09147824824242573,
  0.09035354660017635,
  0.08924440062042854,
  0.08814968080025201,
  0.08706842384984594,
  0.08599984686107716,
  0.0849433546583852,
  0.08389854159148052,
  0.08286518890197428,
  0.08184325864691158,
  0.0808328850088289,
  0.07983436367598248,
  0.07884813984450852,
  0.07787479527963692,
  0.07691503477637024,
  0.0759696722804313,
  0.07503961686604027,
  0.07412585871613422,
  0.07322945521076303,
  0.07235151719856034,
  0.07149319550253752,
  0.07065566769339512,
  0.06984012514982528,
  0.06904776041479999,
  0.06827975484883303,
  0.06753726657501352,
  0.06682141870579823,
  0.06613328783777049,
  0.0654738927975982,
  0.06484418362008826,
  0.06424503073741375,
  0.06367721435721853,
  0.0631414140062939,
  0.06263819821579221,
  0.06216801432341523,
  0.061731178367479045,
  0.06132786504700706,
  0.060958097720579515,
  0.060621738413880424,
  0.06031847780053495,
  0.06004782511084872,
  0.05980909790469538,
  0.05960141161118518,
  0.05942366867546667,
  0.059274547035216146,
  0.05915248741920624,
  0.05905567849193691,
  0.05898203787030881,
  0.05892918481733897,
  0.0588943953786325,
  0.058874520228222565,
  0.05886583601601325,
  0.058863904147570714,
  0.058864191607041455,
  0.05886431020167096]]



        trj_joints1 = []
        for i in range(200):
            x = xyz[0][i]
            y = xyz[1][i]
            z = xyz[2][i]
            thetas = self.ik(x,y,z)
            trj_joints1.append(thetas)

        return trj_joints1

#    def plot_xyz(self):
#        # ****** COPY/PASTE BEGIN ****** paste following code into your own script
#        # Realtime plot X, Y, Z in debug window for simulation and real NAO
#        # ie. plots uppercase X for desired and lowercase x for actual in millimeters
#        line = "%03s" % str(self.loop) #<<<< INITIALIZE self.loop by placing self.loop = 0 in your onLoad(self):
#        xmin = 0.0 # range settings
#        xmax = 250.0
#        ymin = -250.0
#        ymax = 0.0
#        zmin = 0.0
#        zmax = 250.0
#        screenwidth = 100 # in characters
#        xdesired = self.rxdesired # <<<< CHANGE  to match your xdesired variable name
#        xactual = self.rxactual # <<<< CHANGE  to match your xactual variable name
#        ydesired = self.rydesired # <<<< CHANGE  to match your ydesired variable name
#        yactual = self.ryactual # <<<< CHANGE  to match your yactual variable name
#        zdesired = self.rzdesired # <<<< CHANGE  to match your zdesired variable name
#        zactual = self.rzactual # <<<< CHANGE  to match your zactual variable name
#        for i in range(0,screenwidth):
#            symbol = " "
#            if (i == int((xdesired-xmin)/(xmax-xmin)*screenwidth)): symbol = "X"
#            if (i == int((xactual-xmin)/(xmax-xmin)*screenwidth)): symbol = "x"
#            if (i == int((ydesired-ymin)/(ymax-ymin)*screenwidth)): symbol = "Y"
#            if (i == int((yactual-ymin)/(ymax-ymin)*screenwidth)): symbol = "y"
#            if (i == int((zdesired-zmin)/(zmax-zmin)*screenwidth)): symbol = "Z"
#            if (i == int((zactual-zmin)/(zmax-zmin)*screenwidth)): symbol = "z"
#            line += symbol # display in debug window
#        self.logger.warning(line)
#        self.loop += 1
#        # ****** COPY/PASTE END ****** PlotXYZ

    def move_to_angle(self, thetas):
        self.motion_service = self.session().service("ALMotion")
        names = ["RShoulderPitch", "RShoulderRoll", "RElbowRoll"]
        for angle, name in zip(thetas, names):
            self.motion_service.setAngles(name, angle, 1)
        time.sleep(0.1)
        self.logger.info(thetas)
#        self.plot_xyz()

    def loop_through_traj(self):
        thetas = self.genTraj()
        for theta in thetas:
            self.move_to_angle(theta)

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.loop_through_traj()

        time.sleep(5.0)
        self.onStopped()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="RArmEndEffectorTransform (1)" id="4" localization="8" tooltip="" x="409" y="221">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.motion_service = self.session().service("ALMotion")
        angles = [-90,90,5,-5,27]
#        angles = [0, math.pi / 2, -math.pi/2]
        names = ["RWristYaw", "RElbowYaw", "RShoulderPitch", "RShoulderRoll", "RElbowRoll"]
        for angle, name in zip(angles, names):
            self.motion_service.setAngles(name, angle*math.pi/180, 0.2)
            print(name, angle)
        time.sleep(5.0)
        self.onStopped()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Parameter name="RShoulderPitch" inherits_from_parent="0" content_type="2" value="30" default_value="0" min="-119.5" max="119.5" tooltip="" id="5" />
              <Parameter name="RShoulderRoll" inherits_from_parent="0" content_type="2" value="-30" default_value="0" min="-76" max="18" tooltip="" id="6" />
              <Parameter name="RElbowRoll" inherits_from_parent="0" content_type="2" value="30" default_value="2" min="2" max="88.5" tooltip="" id="7" />
            </Box>
            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="3" />
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" />
            <Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
